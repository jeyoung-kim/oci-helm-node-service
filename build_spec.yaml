version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash

env:
  variables:
    # 필요시 일반 변수 추가
    HELM_REPO_HOST: "icn.ocir.io"   # 배포가 ICN을 바라보므로 빌드도 ICN으로 push
    # HELM_REPO_URL 예시: oci://icn.ocir.io/<tenancy-ns>/<path>/helm-repo
    HELM_REPO_URL: "oci://icn.ocir.io/cnhqzfkqyp72/jey/iad-dop-lab18-1-ocir-2/helm-repo"

  # Vault에 보관한 Secret OCID들을 선언(예: Auth Token 등)
  vaultVariables:
    USER_AUTH_TOKEN: "ocid1.vaultsecret.oc1.ap-seoul-1.<your-secret-ocid>"  # OCIR Auth Token
    # 필요시 추가: HELM_REPO_USER도 시크릿으로 관리 가능

  # 후속 파이프라인/스테이지에서 사용할 값
  exportedVariables:
    - BUILDRUN_HASH
    - HELM_VERSION

steps:
  - type: Command
    name: "Define unique image tag"
    timeoutInSeconds: 40
    command: |
      export BUILDRUN_HASH="$(echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7)"
      echo "BUILDRUN_HASH: ${BUILDRUN_HASH}"

  - type: Command
    name: "Define unique version for Helm"
    timeoutInSeconds: 40
    command: |
      export HELM_VERSION="0.1.0-${BUILDRUN_HASH}"
      echo "HELM_VERSION: ${HELM_VERSION}"

  - type: Command
    timeoutInSeconds: 600
    name: "Install Node Prereqs"
    command: |
      cd "${OCI_WORKSPACE_DIR}/node_express"
      # nvm 설치 (필요 시 고정 버전으로)
      curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
      nvm install lts/erbium
      echo "NODE VERSION: $(node -v)"
      echo "NPM  VERSION: $(npm -v)"
    onFailure:
      - type: Command
        timeoutInSeconds: 40
        runAs: root
        command: |
          echo "Handling Failure (Install Node Prereqs)"

  - type: Command
    timeoutInSeconds: 600
    name: "NPM install"
    command: |
      cd "${OCI_WORKSPACE_DIR}/node_express"
      npm install
    onFailure:
      - type: Command
        timeoutInSeconds: 40
        runAs: root
        command: |
          echo "Handling Failure (NPM install)"

  - type: Command
    timeoutInSeconds: 1200
    name: "Run Tests"
    command: |
      cd "${OCI_WORKSPACE_DIR}/node_express"
      npm test

  - type: Command
    timeoutInSeconds: 1200
    name: "Helm Build & Push (ICN)"
    command: |
      set -euo pipefail
      cd "${OCI_WORKSPACE_DIR}/node_express/helm/node-service"

      # 필요한 변수만 치환하여 안전하게 처리
      export VARS='$HELM_VERSION $BUILDRUN_HASH'
      envsubst "${VARS}" < Chart.yaml > Chart.yaml.tmp && mv Chart.yaml.tmp Chart.yaml

      echo "==== Chart.yaml after envsubst ===="
      cat Chart.yaml

      # 패키징
      helm package .

      echo "Helm repo URL: ${HELM_REPO_URL}"
      echo "Helm repo host: ${HELM_REPO_HOST}"

      # 레지스트리 로그인(ICN)
      # HELM_REPO_USER는 일반 변수/파이프라인 파라미터/시크릿 중 하나로 주입되어 있어야 함
      helm registry login "${HELM_REPO_HOST}" -u "${HELM_REPO_USER}" -p "${USER_AUTH_TOKEN}"

      # 차트 파일명은 name-version.tgz 규칙 (예: node-service-0.1.0-<hash>.tgz)
      helm push "node-service-${HELM_VERSION}.tgz" "${HELM_REPO_URL}"

      # 스모크: 방금 올린 버전을 같은 리전/경로에서 pull 확인
      helm pull "${HELM_REPO_URL}/node-service" --version "${HELM_VERSION}" --debug
      echo "Helm chart ${HELM_VERSION} push & pull (smoke) OK."

  - type: Command
    timeoutInSeconds: 1200
    name: "Build container image"
    command: |
      cd "${OCI_WORKSPACE_DIR}/node_express"
      docker build --pull --rm -t jey/iad-dop-lab18-1-ocir-1/node-service .

outputArtifacts:
  - name: APPLICATION_DOCKER_IMAGE
    type: DOCKER_IMAGE
    location: jey/iad-dop-lab18-1-ocir-1/node-service:latest
