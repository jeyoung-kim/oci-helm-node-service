version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash

env:
  variables:
    # ▼ OCIR 접속/경로 변수 (파이프라인 변수로 주입 권장)
    TENANCY_NS: "cnhqzfkqyp72"                         # 예: 콘솔 네임스페이스
    HELM_REPO_HOST: "icn.ocir.io"
    HELM_REPO_URL: "oci://icn.ocir.io/cnhqzfkqyp72/jey/iad-dop-lab18-1-ocir-2/helm-repo"
    IMAGE_REPO: "icn.ocir.io/cnhqzfkqyp72/jey/iad-dop-lab18-1-ocir-1/node-service"
    # 로그인 사용자명은 <tenancy-namespace>/<user or authname> 형식
    HELM_REPO_USER: "cnhqzfkqyp72/<user_or_authname>"
    DOCKER_USER: "cnhqzfkqyp72/<user_or_authname>"

  vaultVariables:
    # ▼ OCI Vault의 auth token secret OCID (예시)
    USER_AUTH_TOKEN: "ocid1.vaultsecret.oc1...."  # 실제 secret OCID

  exportedVariables:
    - BUILDRUN_HASH
    - HELM_VERSION

steps:
  - type: Command
    name: "Define unique image tag"
    timeoutInSeconds: 40
    command: |
      export BUILDRUN_HASH="$(echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7)"
      echo "BUILDRUN_HASH: $BUILDRUN_HASH"

  - type: Command
    name: "Define unique version for Helm"
    timeoutInSeconds: 40
    command: |
      export HELM_VERSION="0.1.0-${BUILDRUN_HASH}"
      echo "HELM_VERSION: $HELM_VERSION"

  - type: Command
    timeoutInSeconds: 600
    name: "Install Node Prereqs"
    command: |
      cd "${OCI_WORKSPACE_DIR}/node_express"
      # nvm 설치
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      nvm install lts/erbium
      node -v && npm -v

  - type: Command
    timeoutInSeconds: 600
    name: "NPM install"
    command: |
      cd "${OCI_WORKSPACE_DIR}/node_express"
      npm ci

  - type: Command
    timeoutInSeconds: 1200
    name: "Run Tests"
    command: |
      cd "${OCI_WORKSPACE_DIR}/node_express"
      npm test

  - type: Command
    timeoutInSeconds: 1200
    name: "Helm Build & Push"
    command: |
      set -e
      cd "${OCI_WORKSPACE_DIR}/node_express/helm/node-service"

      # Chart.yaml 내에 version/name이 env로 치환되도록 준비
      # 예: Chart.yaml에 version: "0.1.0-${BUILDRUN_HASH}" 형태가 들어있어야 envsubst가 반영됩니다.
      export BUILDRUN_HASH="${BUILDRUN_HASH}"
      export HELM_VERSION="${HELM_VERSION}"

      originalChartfile="Chart.yaml"
      tmpChartfile=$(mktemp)
      cp --attributes-only --preserve "$originalChartfile" "$tmpChartfile"
      cat "$originalChartfile" | envsubst > "$tmpChartfile" && mv "$tmpChartfile" "$originalChartfile"

      echo "=== Chart.yaml after substitution ==="
      cat Chart.yaml

      # 패키징
      helm package .

      # OCIR(Helm OCI) 로그인
      helm registry login "${HELM_REPO_HOST}" -u "${HELM_REPO_USER}" -p "${USER_AUTH_TOKEN}"

      # 차트 푸시 (예: node-service-0.1.0-<HASH>.tgz)
      helm push ./*.tgz "${HELM_REPO_URL}"

      # 푸시 검증
      helm show chart "${HELM_REPO_URL}/node-service" --version "${HELM_VERSION}"

  - type: Command
    timeoutInSeconds: 1200
    name: "Build & Push container image"
    command: |
      set -e
      cd "${OCI_WORKSPACE_DIR}/node_express"

      # 빌드
      docker build --pull --rm -t "node-service:build" .

      # OCIR 로그인
      docker login "${HELM_REPO_HOST}" -u "${DOCKER_USER}" -p "${USER_AUTH_TOKEN}"

      # 태깅(배포 values.yaml과 일치: tag=${BUILDRUN_HASH})
      docker tag "node-service:build" "${IMAGE_REPO}:${BUILDRUN_HASH}"

      # 푸시
      docker push "${IMAGE_REPO}:${BUILDRUN_HASH}"

outputArtifacts:
  - name: APPLICATION_DOCKER_IMAGE
    type: DOCKER_IMAGE
    location: icn.ocir.io/cnhqzfkqyp72/jey/iad-dop-lab18-1-ocir-1/node-service:${BUILDRUN_HASH}
